import { User } from './../../../models/user';
import { Beneficiary } from './../../../models/beneficiary';
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-beneficiary-app',
  templateUrl: './beneficiary-app.component.html',
  styleUrls: ['./beneficiary-app.component.css']
})
export class BeneficiaryAppComponent implements OnInit {
  user: User;
  showBeneficiaryDetailForm = false;

  constructor() { }

  ngOnInit() {
      this.user = {
      id: 1,
      email: 'email@example.com',
      firstName: 'Bob',
      lastName: 'Ross',
      primaryBeneficiaries: [
        {
        id: 1,
        firstName: 'Bruce',
        lastName: 'Wayne',
        percentOfBenefit: 50
      },
      {
        id: 2,
        firstName: 'John',
        lastName: 'Wayne',
        percentOfBenefit: 50
      }
    ],
      contingentBeneficiaries: []
    };
  }

  /************************************************************
   * Only for testing. Should be removed when no longer needed
   * Automatically generates an id for a Beneficiary
   * Simualtes what a database would do for ids
  ************************************************************/
  genId(beneficiaries: Beneficiary[]): number {
    return beneficiaries.length > 0 ? Math.max(...beneficiaries.map(beneficiary => beneficiary.id)) + 1 : 1;
  }

  toggleShowBeneficiaryDetailForm() {
    this.showBeneficiaryDetailForm = !this.showBeneficiaryDetailForm;
  }

  deleteBeneficiary(beneficiary: Beneficiary) {
    this.user.primaryBeneficiaries = this.user.primaryBeneficiaries.filter(b => b.id !== beneficiary.id);

    this.adjustBeneficiaryPercent();
  }

  addBeneficiary(beneficiary: Beneficiary) {
    this.showBeneficiaryDetailForm = false;
    this.user.primaryBeneficiaries.push(beneficiary);

    const lastIndex = this.user.primaryBeneficiaries.length - 1;

    /**
     * This would need to be replaced with the id
     * of the object returning from the database
     * after if has been inserted and an id has
     * been auto-generated by the database
     */
    const newId = this.genId(this.user.primaryBeneficiaries);
    this.user.primaryBeneficiaries[lastIndex].id = newId;

    this.adjustBeneficiaryPercent(this.user.primaryBeneficiaries[lastIndex]);
  }

  closeBeneficiaryDetailForm() {
    this.showBeneficiaryDetailForm = false;
  }

  adjustBeneficiaryPercent(beneficiary?: Beneficiary) {
    // Only 1 beneficiary, so default to 100%
    if (this.user.primaryBeneficiaries.length === 1) {
      this.user.primaryBeneficiaries[0].percentOfBenefit = 100;
    }

    // Only 2 beneficiaries
    if (this.user.primaryBeneficiaries.length === 2) {
      const totalBeneficiaryAmount = 100;

      // When the user deletes the number of
      // beneficiaries and now they equal 2
      if (beneficiary === undefined || beneficiary === null) {
        // Adjust the difference in the beneficiary
        // according to the first beneficiary
        this.user.primaryBeneficiaries[1].percentOfBenefit = totalBeneficiaryAmount - this.user.primaryBeneficiaries[0].percentOfBenefit;
      } else {
        // Adjust the difference in the beneficiary
        // that the user did not change, to equal 100%
        const userAdjustedBeneficiary = this.user.primaryBeneficiaries.filter(b => b.id === beneficiary.id);
        const otherBeneficiary = this.user.primaryBeneficiaries.filter(b => b.id !== beneficiary.id);

        otherBeneficiary[0].percentOfBenefit = totalBeneficiaryAmount - userAdjustedBeneficiary[0].percentOfBenefit;
      }
    }

    // More than 2 beneficiaries...
    if (this.user.primaryBeneficiaries.length > 2) {

    }
  }

}
