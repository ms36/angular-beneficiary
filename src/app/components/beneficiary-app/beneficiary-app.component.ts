import { BeneficiaryType } from './../../../models/beneficiaryType';
import { User } from './../../../models/user';
import { Beneficiary } from './../../../models/beneficiary';
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-beneficiary-app',
  templateUrl: './beneficiary-app.component.html',
  styleUrls: ['./beneficiary-app.component.css']
})
export class BeneficiaryAppComponent implements OnInit {
  user: User;
  beneficiaryType = BeneficiaryType;
  showBeneficiaryDetailForm = false;
  showSaveButton = false;

  constructor() { }

  ngOnInit() {
    this.user = {
      id: 1,
      email: 'email@example.com',
      firstName: 'Bob',
      lastName: 'Ross',
      beneficiaryTypes: [[
        {
        id: 1,
        firstName: 'Bruce',
        lastName: 'Wayne',
        percentOfBenefit: 50
      },
      {
        id: 2,
        firstName: 'John',
        lastName: 'Wayne',
        percentOfBenefit: 50
      }
    ],
      []]
    };
  }

  /************************************************************
   * Only for testing. Should be removed when no longer needed
   * Automatically generates an id for a Beneficiary
   * Simualtes what a database would do for ids
  ************************************************************/
  genId(beneficiaries: Beneficiary[]): number {
    return beneficiaries.length > 0 ? Math.max(...beneficiaries.map(beneficiary => beneficiary.id)) + 1 : 1;
  }

  toggleShowBeneficiaryDetailForm() {
    this.showBeneficiaryDetailForm = !this.showBeneficiaryDetailForm;
  }

  deleteBeneficiary(type, beneficiary: Beneficiary) {
    this.user.beneficiaryTypes[type] = this.user.beneficiaryTypes[type].filter(b => b.id !== beneficiary.id);

    this.adjustBeneficiaryPercent(type);
  }

  addBeneficiary(type, beneficiary: Beneficiary) {
    this.showBeneficiaryDetailForm = false;
    this.user.beneficiaryTypes[type].push(beneficiary);

    const lastIndex = this.user.beneficiaryTypes[type].length - 1;

    /********************************************
     * This would need to be replaced with the id
     * of the object returning from the database
     * after if has been inserted and an id has
     * been auto-generated by the database
     ********************************************/
    const newId = this.genId(this.user.beneficiaryTypes[type]);
    this.user.beneficiaryTypes[type][lastIndex].id = newId;

    this.adjustBeneficiaryPercent(type, this.user.beneficiaryTypes[type][lastIndex]);
  }

  saveBeneficiary() {
    // Save to the database
    console.log('save');
    // Hide the save button after saving
    this.showSaveButton = false;
  }

  closeBeneficiaryDetailForm() {
    this.showBeneficiaryDetailForm = false;
  }

  percentageChanged(type, beneficiary?: Beneficiary) {
    // Add what to do when a user maunally changes the percent

    // If there are only 2 beneficiaries automatically
    // adjust percentages and save
    if (this.user.beneficiaryTypes[type].length === 2) {
      this.adjustBeneficiaryPercent(type, beneficiary);
      this.saveBeneficiary();
    } else {
      // let totalPercent = 0;

      // for (let i = 0; i < this.user.primaryBeneficiaries.length; i++) {
      //   totalPercent += this.user.primaryBeneficiaries[i].percentOfBenefit;
      // }
      // console.log('percentageChanged: totalPercent', totalPercent);
      // if (totalPercent === 100) {
      //   console.log('percentageChanged: show');
      //   this.showSaveButton = true;
      // } else {
      //   console.log('percentageChanged: hide');
      //   this.showSaveButton = false;
      // }
      this.showSaveButton = true;
    }
  }

  // Automatically adjust the beneficiary percent
  adjustBeneficiaryPercent(type, beneficiary?: Beneficiary) {
    // Only 1 beneficiary, so default to 100%
    if (this.user.beneficiaryTypes[type].length === 1) {
      this.user.beneficiaryTypes[type][0].percentOfBenefit = 100;
    }

    // More than 2 beneficiaries
    if (this.user.beneficiaryTypes[type].length > 1) {
      const totalBeneficiaryAmount = 100;

      // When the user deletes the number of beneficiaries
      // Evenly adjust the beneficiaries
      if (beneficiary === undefined || beneficiary === null) {
        const numberOfBeneficiaries = this.user.beneficiaryTypes[type].length;

        for (let i = 0; i < numberOfBeneficiaries; i++) {
          const dividedAmount = Math.floor(totalBeneficiaryAmount / numberOfBeneficiaries);
          this.user.beneficiaryTypes[type][i].percentOfBenefit = dividedAmount;
        }

        // Any remaing amount, add it to the first beneficiary
        const remainingAmount = Math.floor(totalBeneficiaryAmount % numberOfBeneficiaries);
        this.user.beneficiaryTypes[type][0].percentOfBenefit += remainingAmount;

        // When the user adds the number of beneficiaries
        // Evenly adjust the beneficiaries based on the
        // difference in the user's last adjusted beneficiary percent
      } else {
        const newTotalBeneficiaryAmount = totalBeneficiaryAmount - beneficiary.percentOfBenefit;
        const otherBeneficiaries = this.user.beneficiaryTypes[type].filter(b => b.id !== beneficiary.id);
        const numberOfBeneficiaries = otherBeneficiaries.length;

        for (let i = 0; i < numberOfBeneficiaries; i++) {
          const dividedAmount = Math.floor(newTotalBeneficiaryAmount / numberOfBeneficiaries);
          otherBeneficiaries[i].percentOfBenefit = dividedAmount;
        }

        // Any remaing amount, add it to the first beneficiary
        const remainingAmount = Math.floor(newTotalBeneficiaryAmount % (otherBeneficiaries.length));
        otherBeneficiaries[0].percentOfBenefit += remainingAmount;
      }
    }
  }

}
